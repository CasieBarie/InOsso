name: Build Summary
on:
  workflow_call:
    inputs:
      deploy:
        description: "Set to true to run Docker build & push"
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Detect version change
        if: ${{ inputs.deploy == true }}
        id: version
        run: |
          CURRENT_VERSION=$(grep -m1 '<version>' pom.xml | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
          PREVIOUS_VERSION=$(git show HEAD~1:pom.xml 2>/dev/null | grep -m1 '<version>' | sed -E 's/.*<version>(.*)<\/version>.*/\1/' || echo "none")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "previous=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Compile
        id: compile
        run: |
          if mvn -B clean compile --file pom.xml; then
            echo "compile_status=success" >> $GITHUB_ENV
          else
            echo "compile_status=failed" >> $GITHUB_ENV
          fi

      - name: Package JAR
        id: package
        run: |
          if mvn -B package -DskipTests --file pom.xml; then
            echo "package_status=success" >> $GITHUB_ENV
          else
            echo "package_status=failed" >> $GITHUB_ENV
          fi

      - name: Check JAR exists
        id: jar
        run: |
          JAR_FILE=$(find target -name "*.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "jar_status=missing" >> $GITHUB_ENV
          else
            FILESIZE=$(stat -c%s "$JAR_FILE")
            if [ "$FILESIZE" -le 0 ]; then
              echo "jar_status=empty" >> $GITHUB_ENV
            else
              echo "jar_status=ok" >> $GITHUB_ENV
              echo "jar_file=$JAR_FILE" >> $GITHUB_ENV
              echo "jar_size=$FILESIZE" >> $GITHUB_ENV
            fi
          fi

      - name: Docker Build & Push (if deploy)
        if: ${{ inputs.deploy == true }}
        id: docker
        run: |
          if docker build -t ghcr.io/casiebarie/inosso-bot:latest .; then
            echo "docker_build_status=success" >> $GITHUB_ENV
          else
            echo "docker_build_status=failed" >> $GITHUB_ENV
          fi

          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          if docker push ghcr.io/casiebarie/inosso-bot:latest; then
            echo "docker_push_status=success" >> $GITHUB_ENV
          else
            echo "docker_push_status=failed" >> $GITHUB_ENV
          fi

      - name: Build Summary
        run: |
          echo "üì¶ Build Summary"
          echo "### Maven Build"
          [[ "$compile_status" == "success" ]] && echo "- ‚úÖ Compilation: Success" || echo "- ‚ùå Compilation: Failed"
          [[ "$package_status" == "success" ]] && echo "- ‚úÖ Package: Success" || echo "- ‚ùå Package: Failed"

          case "$jar_status" in
            ok) echo "- ‚úÖ JAR Integrity: OK ($jar_size bytes)" ;;
            empty) echo "- ‚ùå JAR Integrity: Empty JAR" ;;
            missing) echo "- ‚ùå JAR Integrity: Missing JAR" ;;
          esac

          if [[ "${{ inputs.deploy }}" == "true" ]]; then
            echo "### Docker"
            [[ "$docker_build_status" == "success" ]] && echo "- ‚úÖ Docker Build: Success" || echo "- ‚ùå Docker Build: Failed"
            [[ "$docker_push_status" == "success" ]] && echo "- ‚úÖ Docker Push: Success" || echo "- ‚ùå Docker Push: Failed"

            echo "### Version Check"
            if [[ "${{ steps.version.outputs.changed }}" == "true" ]]; then
              echo "- ‚úÖ Version changed: ${{ steps.version.outputs.previous }} ‚Üí ${{ steps.version.outputs.current }}"
            else
              echo "- ‚ùå No version change detected (still ${{ steps.version.outputs.current }})"
            fi
          fi

          echo "<details>"
          echo "<summary>### Git Commit Info</summary>"
          echo "- Commit: $(git rev-parse --short HEAD)"
          echo "- Author: $(git log -1 --pretty=format:'%an')"
          echo "- Message: $(git log -1 --pretty=format:'%s')"
          echo "</details>"